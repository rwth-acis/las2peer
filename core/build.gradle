plugins {
    id 'java-library'
    id 'application'
    // maven plugin is used to create .pom files and for publishing
    id 'maven-publish'
    id 'eclipse'
}

def las2peerRevision = "${project.property('las2peer.revision')}"
def las2peerBuildNumber = "${project.property('las2peer.build.number')}"
def las2peerRelease = System.env.LAS2PEER_RELEASE != null
def las2peerVersion = las2peerRelease ? "$las2peerRevision.$las2peerBuildNumber" : "$las2peerRevision-SNAPSHOT"

group = 'i5'
archivesBaseName = 'las2peer'
version = las2peerVersion
mainClassName = "i5.las2peer.tools.L2pNodeLauncher"
sourceCompatibility = "${project.property('java.version')}"
targetCompatibility = "${project.property('java.version')}"

repositories {
    // Use maven central for resolving dependencies.
    mavenCentral()

}

compileJava {
    // -XDignore.symbol.file fixes build in JDK8
    options.compilerArgs += ["-XDignore.symbol.file", "-Xlint:deprecation"]
    options.fork = true
    options.forkOptions.executable = "javac"
}

javadoc {
    destinationDir = file("$projectDir/export/javadoc")
}

task junitdoc(type: Javadoc) {
    doFirst {options.addStringOption("encoding", "iso-8859-1")}
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    source = sourceSets.test.java
    destinationDir = file("$projectDir/export/junitdoc")
}

build.dependsOn "javadoc"
build.dependsOn "junitdoc"

dependencies {
    // Use JUnit test framework.
    // Not just testImplementation, because JUnit asserts are used in main main/java/i5/las2peer/testing/TestSuite.java
    implementation "junit:junit:${project.property('junit.version')}"
    testImplementation "org.mockito:mockito-all:1.9.5"

    //use local jars
    implementation fileTree(dir: '../jars', include: '*.jar')

    //api "FreePastry:FreePastry:3.1.0"
    api "xpp3:xpp3:1.1.4c" // FreePastry dependency
    //api "javax.xml.parsers:jaxp-api:1.4.5"

    // UPnP libs for NAT handling
    api("commons-jxpath:commons-jxpath:1.3") {
        exclude module: "xercesImpl"
        exclude module: "xml-apis"
    }
    api "commons-logging:commons-logging:1.2"
    //implementation group: 'net.sbbi', name: 'sbbi-upnplib', version: '1.0.4'

    // Web3j for Ethereum node interaction
    api("ch.qos.logback:logback-core:1.2.3") {
        artifact {
            name = "logback-core"
            type = "jar"
        }
    }
    api "org.web3j:core:4.5.18"
    api "org.slf4j:slf4j-simple:1.7.25"
}

// put all .jar files into export/jars folder
tasks.withType(Jar) {
    destinationDirectory = file("$projectDir/export/jars")
}

jar {
    manifest {
        attributes("Main-Class": "i5.las2peer.tools.L2pNodeLauncher",
                   "Implementation-Version": las2peerVersion,
                   "Class-Path": configurations.runtimeClasspath.files.collect { it.getName() }.join(" "))
    }
}

task copyToLib(type: Copy) {
    from configurations.runtimeClasspath
    into "$projectDir/lib"
}

build.dependsOn copyToLib

// Besides the standard main and test source sets, we also have two test_help source sets.
// These use las2peer core (given by sourceSets.main.output) as their compile classpath.
sourceSets {
    testHelp {
        java {
            srcDirs = ["src/test_help"]
        }
        compileClasspath = sourceSets.main.output
        java.outputDir = file("$buildDir/classes/java/test_help")
    }
    testHelp2 {
        java {
            srcDirs = ["src/test_help2"]
        }
        compileClasspath = sourceSets.main.output
        java.outputDir = file("$buildDir/classes/java/test_help2")
    }
    main {
        resources {
            // las2peer.policy
            srcDirs = ["resources"]
        }
    }
}

// execute all junit tests
test {
    dependsOn "junit_jars"

    // As soon as one test fails, the build should fail. This speeds up builds running on CI servers.
    failFast = true

    maxParallelForks = 9
    forkEvery = 1

    include "**/*Test.class"
    exclude "**/SandboxTest.class"
    exclude "**/ReplicationTest.class"

    useJUnit()
}

compileJava {
    dependsOn "copyMain"
}

// Copies .xml files into build directory
task copyMain(type: Copy) {
    from "src/main/java"
    include "**/*.xml"
    into "$buildDir/classes/java/main"
}

compileTestHelpJava {
    dependsOn "copyTestHelp"
}

// Copies files like .properties files into build directory
task copyTestHelp(type: Copy) {
    from "src/test_help/java"
    exclude "**/*.java"
    exclude "*.java"
    into "$buildDir/classes/java/test_help"
}

compileTestHelp2Java {
    dependsOn "copyTestHelp2"
}

// Copies files like .properties files into build directory
task copyTestHelp2(type: Copy) {
    from "src/test_help2/java"
    exclude "**/*.java"
    exclude "*.java"
    into "$buildDir/classes/java/test_help2"
}

task junit_jars {
    dependsOn "jar_test1_1_1"
    dependsOn "jar_test1_1_2"
    dependsOn "jar_test2_1_0"
    dependsOn "jar_testService1_1_0"
    dependsOn "jar_testService1_1_1"
    dependsOn "jar_testService2_1_0"
    dependsOn "jar_evilService"
    dependsOn "jar_testPackageService"
}


task jar_test1_1_1(type: Jar) {
    archiveFileName = "i5.las2peer.classLoaders.testPackage1-1.0.jar"
    from sourceSets.testHelp.output
    include "i5/las2peer/classLoaders/testPackage1/**/*"

    manifest {
        attributes "Library-SymbolicName": "i5.las2peer.classLoaders.testPackage1"
        attributes "Library-Version": "1.0"
        attributes "Import-Bundle": ""
        attributes "Library-Name": "JUNIT TestPackage(1)"
        attributes "Library-Description": "a simple test package"
        attributes "Import-Library": ""
    }
}

task jar_test1_1_2(type: Jar) {
    archiveFileName = "i5.las2peer.classLoaders.testPackage1-1.1.jar"
    from sourceSets.testHelp2.output
    include "i5/las2peer/classLoaders/testPackage1/**/*"

    manifest {
        attributes "Library-SymbolicName": "i5.las2peer.classLoaders.testPackage1"
        attributes "Library-Version": "1.1"
        attributes "Import-Bundle": ""
        attributes "Library-Name": "JUNIT TestPackage(1)"
        attributes "Library-Description": "a simple test package"
        attributes "Import-Library": ""
    }
}

task jar_test2_1_0(type: Jar) {
    archiveFileName = "i5.las2peer.classLoaders.testPackage2-1.0.jar"
    from sourceSets.testHelp.output
    include "i5/las2peer/classLoaders/testPackage2/**/*"

    manifest {
        attributes "Library-SymbolicName": "i5.las2peer.classLoaders.testPackage2"
        attributes "Library-Version": "1.0"
        attributes "Import-Bundle": ""
        attributes "Library-Name": "JUNIT TestPackage(2)"
        attributes "Library-Description": "a simple test package"
        attributes "Import-Library": 'i5.las2peer.classLoaders.testPackage1;version="[1.1,2.0)"'
        attributes "l2p-Name": "test2"
        attributes "l2p-Version": "1.0"
        attributes "l2p-deps": "test1-(1.1--1.2)"
    }
}

task jar_testService1_1_0(type: Jar) {
    archiveFileName = "i5.las2peer.testServices.testPackage1-1.0.jar"
    from sourceSets.testHelp.output
    include "i5/las2peer/testServices/testPackage1/**/*"

    manifest {
        attributes "Library-SymbolicName": "i5.las2peer.testServices.testPackage1"
        attributes "Library-Version": "1.0"
    }
}

task jar_testService1_1_1(type: Jar) {
    archiveFileName = "i5.las2peer.testServices.testPackage1-1.1.jar"
    from sourceSets.testHelp2.output
    include "i5/las2peer/testServices/testPackage1/**/*"

    manifest {
        attributes "Library-SymbolicName": "i5.las2peer.testServices.testPackage1"
        attributes "Library-Version": "1.1"
    }
}

task jar_testService2_1_0(type: Jar) {
    archiveFileName = "i5.las2peer.testServices.testPackage2-1.0.jar"
    from sourceSets.testHelp.output
    include "i5/las2peer/testServices/testPackage2/**/*"

    manifest {
        attributes "Library-SymbolicName": "i5.las2peer.testServices.testPackage2"
        attributes "Library-Version": "1.0"
    }
}

task jar_evilService(type: Jar) {
    archiveFileName = "i5.las2peer.classLoaders.evilService-1.0.jar"
    from sourceSets.testHelp.output
    include "i5/las2peer/classLoaders/evilService/**/*"

    manifest {
        attributes "Library-SymbolicName": "i5.las2peer.classLoaders.evilService"
        attributes "Library-Version": "1.0"
    }
}

task jar_testPackageService(type: Jar) {
    archiveFileName = "i5.las2peer.testServices.testPackage3-1.0.jar"
    from sourceSets.testHelp2.output
    include "i5/las2peer/testServices/testPackage3/**/*"

    manifest {
        attributes "Library-SymbolicName": "i5.las2peer.testServices.testPackage3"
        attributes "Library-Version": "1.0"
    }
}

clean.doLast {
    file("tmp").deleteDir()
    file("export").deleteDir()
    file("lib").deleteDir()
}

// In .pom file, use "runtime" scope for dependencies declared with api configuration (instead of "compile" scope).
publishing.publications.all {
    pom.withXml {
        asNode().dependencies."*".findAll() {
            it.scope.text() == "compile" && project.configurations.api.allDependencies.find { dep -> dep.name == it.artifactId.text() }
        }.each { it.scope*.value = "runtime"}
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/rwth-acis/las2peer")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

// disable module metadata publication
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

// configuration for eclipse (this allows to import las2peer as a gradle project in eclipse without any problems)
eclipse {
    classpath {
      file {
            whenMerged {
                def jre = entries.find { it.path.contains "org.eclipse.jdt.launching.JRE_CONTAINER" }
                jre.entryAttributes["add-exports"] = "java.desktop/com.sun.beans.finder=ALL-UNNAMED"
                jre.entryAttributes["module"] = "true"


                // remove test_help2 classpath entry for eclipse
                entries.removeAll { it.path == "src/test_help2" }

                // fix path and output directory of test_help
                def testHelp = entries.find { it.path == "src/test_help" }
                testHelp.path = "src/test_help/java"
                testHelp.output = "output/testHelp"

                // change output directory for test, main, resources and default
                def test = entries.find { it.path == "src/test/java" }
                test.output = "output/test"

                def main = entries.find { it.path == "src/main/java" }
                main.output = "output/main"

                def resources = entries.find { it.path == "resources" }
                resources.output = "output/main"

                def defaultEntry = entries.find { it.kind == "output" && it.path == "bin/default" }
                defaultEntry.path = "output/default"
            }
        }
    }
}
